{"version":3,"sources":["static_data.js","reducers/contacts.js","constants/action_type.js","reducers/index.js","reducers/user.js","reducers/activeUserId.js","reducers/messages.js","reducers/typing.js","store/index.js","containers/User.js","actions/index.js","components/Sidebar.js","components/Empty.js","components/StartChat.js","components/ChatRoomHeader.js","components/ChatRoomMsgs.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","SET_ACTIVE_USER_ID","SET_CHAT_MESSAGES","SET_TYPING_VALUE","SEND_MESSAGE","SET_ACTIVE_USER","combineReducers","state","action","type","payload","activUserId","message","userId","allUserMsgs","keys","pop","typing","store","createStore","reducers","handleUserId","id","dispatch","setActiveUserId","setActiveUser","User","contact","className","onClick","src","alt","Sidebar","map","to","key","Empty","StartChat","first_name","split","ChatRoomHeader","Msg","ChatRoomMsgs","props","scrollToBottom","ChatRoomMsgsRef","current","scrollTop","scrollHeight","React","createRef","this","msgsArr","obj","ref","masg","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","setTypingValue","target","placeholder","ChatWindow","console","log","activeUser","Main","exact","path","App","values","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","render","ReactDOM","document","getElementById","subscribe","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1d5e0c06.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}\r\n","import { contacts } from \"../static_data\";\r\n\r\nexport default (state = contacts, action) => {\r\n  return state;\r\n};\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_CHAT_MESSAGES = \"SET_CHAT_MESSAGES\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\nexport const SET_ACTIVE_USER = \"SET_ACTIVE_USER\";\r\n","import { combineReducers } from \"redux\";\r\nimport contacts from \"./contacts\";\r\nimport user from \"./user\";\r\nimport activUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  user,\r\n  activUserId,\r\n  messages,\r\n  typing\r\n});\r\n","import { SET_ACTIVE_USER } from \"./../constants/action_type\";\r\nimport { generateUser } from \"../static_data\";\r\n\r\nexport default function user(state = generateUser(), action) {\r\n  if (action.type === SET_ACTIVE_USER) {\r\n    return action.payload;\r\n  }\r\n  return state;\r\n}\r\n","import { SET_ACTIVE_USER_ID } from \"../constants/action_type\";\r\n\r\nexport default function activUserId(state = null, action) {\r\n  if (action.type === SET_ACTIVE_USER_ID) {\r\n    return action.payload;\r\n  }\r\n  return state;\r\n}\r\n","import { SET_CHAT_MESSAGES, SEND_MESSAGE } from \"../constants/action_type\";\r\nimport { getMessages } from \"../static_data\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n  if (action.type === SET_CHAT_MESSAGES) {\r\n    return action.payload;\r\n  } else if (action.type === SEND_MESSAGE) {\r\n    const { message, userId } = action.payload;\r\n    const allUserMsgs = state[userId];\r\n    const number = +_.keys(allUserMsgs).pop() + 1;\r\n    return {\r\n      ...state,\r\n      [userId]: {\r\n        ...allUserMsgs,\r\n        [number]: {\r\n          number,\r\n          text: message,\r\n          is_user_msg: true\r\n        }\r\n      }\r\n    };\r\n  }\r\n  return state;\r\n}\r\n","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action_type\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n  if (action.type === SET_TYPING_VALUE) {\r\n    return action.payload;\r\n  }\r\n  if (action.type === SEND_MESSAGE) {\r\n    return \"\";\r\n  }\r\n  return state;\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"./../reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"../containers/User.css\";\r\nimport store from \"./../store/index\";\r\nimport { setActiveUserId, setActiveUser } from \"./../actions/index\";\r\n\r\nconst handleUserId = (id, user) => {\r\n  store.dispatch(setActiveUserId(id));\r\n  store.dispatch(setActiveUser(user));\r\n};\r\n\r\nconst User = ({ contact: user }) => {\r\n  const { name, profile_pic, status, user_id } = user;\r\n  return (\r\n    <div className=\"User\" onClick={() => handleUserId(user_id, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User_pic\"></img>\r\n      <div className=\"User_details\">\r\n        <p className=\"User_details-name\">{name}</p>\r\n        <p className=\"User_details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { SET_ACTIVE_USER_ID } from \"../constants/action_type\";\r\nimport { SET_CHAT_MESSAGES } from \"../constants/action_type\";\r\nimport { SET_TYPING_VALUE } from \"../constants/action_type\";\r\nimport { SEND_MESSAGE } from \"../constants/action_type\";\r\nimport { SET_ACTIVE_USER } from \"./../constants/action_type\";\r\n\r\nexport const setActiveUserId = id => ({\r\n  type: SET_ACTIVE_USER_ID,\r\n  payload: id\r\n});\r\nexport const setActiveUser = user => ({\r\n  type: SET_ACTIVE_USER,\r\n  payload: user\r\n});\r\n\r\nexport const setChatMessages = messages => ({\r\n  type: SET_CHAT_MESSAGES,\r\n  payload: messages\r\n});\r\n\r\nexport const setTypingValue = value => ({\r\n  type: SET_TYPING_VALUE,\r\n  payload: value\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: { message, userId }\r\n});\r\n","import React from \"react\";\r\nimport \"../components/Sidebar.css\";\r\nimport User from \"../containers/User\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map(contact => {\r\n        return (\r\n          <Link to=\"/\">\r\n            <User contact={contact} key={contact.user_id} />\r\n          </Link>\r\n        );\r\n      })}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = () => {\r\n  return (\r\n    <div className=\"Empty\">\r\n      <h1>Want to Talk? Your Friends Are Waiting for You!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"./StartChat.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StartChat = ({ user, activUserId }) => {\r\n  const { name, profile_pic, status } = user;\r\n  const first_name = name.split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"StartChat\">\r\n      <h1 className=\"StartChat__name\">{first_name}</h1>\r\n      <img className=\"StartChat__img\" src={profile_pic} alt={name}></img>\r\n      <p className=\"StartChat__status\">\r\n        <b>Status: </b>\r\n        {status}\r\n      </p>\r\n      <Link to=\"/ChatWindow\">\r\n        <button className=\"StartChat__btn\">Start A Conversation</button>\r\n      </Link>\r\n      <p className=\"StartChat__info\">\r\n        {\" \"}\r\n        Search for someone to start chatting with or go to Contacts to see who\r\n        is available\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartChat;\r\n","import React from \"react\";\r\nimport \"./ChatRoomHeader.css\";\r\n\r\nconst ChatRoomHeader = ({ user }) => {\r\n  const { name, status } = user;\r\n  return (\r\n    <div className=\"ChatRoomHeader\">\r\n      <h1 className=\"ChatRoomHeader__name\">{name}</h1>\r\n      <p className=\"ChatRoomHeader__status\">{status}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoomHeader;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport \"./ChatRoomMsgs.css\";\r\n\r\nconst Msg = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nclass ChatRoomMsgs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ChatRoomMsgsRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.ChatRoomMsgsRef.current.scrollTop = this.ChatRoomMsgsRef.current.scrollHeight;\r\n  };\r\n  render() {\r\n    const msgsArr = _.map(this.props.messages, obj => {\r\n      return obj;\r\n    });\r\n    return (\r\n      <div className=\"ChatRoomMsgs\" ref={this.ChatRoomMsgsRef}>\r\n        {msgsArr.map(masg => (\r\n          <Msg message={masg} key={masg.number} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatRoomMsgs;\r\n","import React from \"react\";\r\nimport store from \"./../store/index\";\r\nimport { setTypingValue, sendMessage } from \"./../actions/index\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n  const state = store.getState();\r\n  const handleChange = e => {\r\n    store.dispatch(setTypingValue(e.target.value));\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { typing, activUserId } = state;\r\n    store.dispatch(sendMessage(typing, activUserId));\r\n  };\r\n  return (\r\n    <form className=\"MessageInput\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"MessageInput__input\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder=\"writing a message\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import React from \"react\";\r\nimport store from \"../store/index\";\r\nimport ChatRoomHeader from \"../components/ChatRoomHeader\";\r\nimport ChatRoomMsgs from \"../components/ChatRoomMsgs\";\r\nimport \"./ChatWindow.css\";\r\nimport MessageInput from \"./MessageInput\";\r\nconst ChatWindow = ({ activUserId }) => {\r\n  const state = store.getState();\r\n  console.log(state);\r\n  const activeUser = state.contacts[activUserId];\r\n  const messages = state.messages[activUserId];\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <ChatRoomHeader user={activeUser} />\r\n      <ChatRoomMsgs messages={messages} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\nimport \"../components/Main.css\";\r\nimport Empty from \"./Empty\";\r\nimport StartChat from \"./StartChat\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport ChatWindow from \"./../containers/ChatWindow\";\r\n\r\nconst Main = ({ user, activUserId }) => {\r\n  const renderMainContent = () => {\r\n    if (activUserId) {\r\n      return (\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <StartChat user={user} activUserId={activUserId} />\r\n          </Route>\r\n          <Route path=\"/ChatWindow\">\r\n            <ChatWindow activUserId={activUserId} />\r\n          </Route>\r\n        </Switch>\r\n      );\r\n    } else {\r\n      return <Empty />;\r\n    }\r\n  };\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"../containers/App.css\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Main from \"../components/Main\";\r\nimport store from \"../store/index\";\r\nimport _ from \"lodash\";\r\nfunction App() {\r\n  const { contacts, user, activUserId } = store.getState();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar contacts={_.values(contacts)} />\r\n      <Main user={user} activUserId={activUserId} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./store/index\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nconst render = () => {\r\n  fancylog();\r\n  return ReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\nrender();\r\nstore.subscribe(render);\r\nfunction fancylog() {\r\n  console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #FFF\");\r\n  console.log(store.getState());\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}